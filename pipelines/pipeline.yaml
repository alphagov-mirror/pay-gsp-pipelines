---
apiVersion: concourse.k8s.io/v1beta1
kind: Pipeline
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
  name: build-release
spec:
  exposed: true
  pipelineString: |

    harbor_source: &harbor_source
      username: ((harbor.harbor_username))
      password: ((harbor.harbor_password))
      harbor:
        url: ((harbor.harbor_url))
        prevent_vul: "false"
      notary:
        url: ((harbor.notary_url))
        root_key: ((harbor.root_key))
        delegate_key: ((harbor.ci_key))
        passphrase:
          root: ((harbor.notary_root_passphrase))
          snapshot: ((harbor.notary_snapshot_passphrase))
          targets: ((harbor.notary_targets_passphrase))
          delegation: ((harbor.notary_delegation_passphrase))

    groups:
      - name: build
        jobs:
          - build-cardid
          - build-frontend
          - build-toolbox
          - build-connector
          - build-ledger
          - build-products
          - build-direct-debit-connector
          - build-direct-debit-frontend

    resource_types:
      - name: github
        type: registry-image
        source:
          repository: govsvc/concourse-github-resource
          tag: "gsp-v1.1.31"

      - name: harbor
        type: registry-image
        privileged: true
        source:
          repository: govsvc/concourse-harbor-resource
          tag: "gsp-v1.1.31"

    resources:
      - name: pipelines
        type: git
        icon: github-circle
        source:
          uri: https://github.com/alphagov/pay-gsp-pipelines
          branch: master
          username: re-autom8-ci
          password: ((github.api-token))

      - name: pay-cardid-src
        type: git
        icon: github-circle
        source:
          uri: https://github.com/alphagov/pay-cardid
          branch: master

      - name: pay-cardid-data
        type: git
        icon: github-circle
        source:
          uri: https://github.com/alphagov/pay-cardid-data
          username: ((gh-readonly.username))
          password: ((gh-readonly.password))

      - name: pay-cardid-image
        type: harbor
        icon: docker
        source:
          <<: *harbor_source
          repository: registry.((cluster.domain))/pay/cardid

      - name: pay-frontend-src
        type: git
        icon: github-circle
        source:
          uri: https://github.com/alphagov/pay-frontend
          branch: master

      - name: pay-frontend-image
        type: harbor
        icon: docker
        source:
          <<: *harbor_source
          repository: registry.((cluster.domain))/pay/frontend

      - name: pay-toolbox-src
        type: git
        icon: github-circle
        source:
          uri: https://github.com/alphagov/pay-toolbox
          branch: master

      - name: pay-toolbox-image
        type: harbor
        icon: docker
        source:
          <<: *harbor_source
          repository: registry.((cluster.domain))/pay/toolbox

      - name: pay-connector-src
        type: git
        icon: github-circle
        source:
          uri: https://github.com/alphagov/pay-connector
          branch: master

      - name: pay-connector-image
        type: harbor
        icon: docker
        source:
          <<: *harbor_source
          repository: registry.((cluster.domain))/pay/connector

      - name: pay-ledger-src
        type: git
        icon: github-circle
        source:
          uri: https://github.com/alphagov/pay-ledger
          branch: master

      - name: pay-ledger-image
        type: harbor
        icon: docker
        source:
          <<: *harbor_source
          repository: registry.((cluster.domain))/pay/ledger

      - name: pay-products-src
        type: git
        icon: github-circle
        source:
          uri: https://github.com/alphagov/pay-products
          branch: master

      - name: pay-products-image
        type: harbor
        icon: docker
        source:
          <<: *harbor_source
          repository: registry.((cluster.domain))/pay/products

      - name: pay-direct-debit-connector-src
        type: git
        icon: github-circle
        source:
          uri: https://github.com/alphagov/pay-direct-debit-connector
          branch: master

      - name: pay-direct-debit-connector-image
        type: harbor
        icon: docker
        source:
          <<: *harbor_source
          repository: registry.((cluster.domain))/pay/direct-debit-connector

      - name: pay-direct-debit-frontend-src
        type: git
        icon: github-circle
        source:
          uri: https://github.com/alphagov/pay-direct-debit-frontend
          branch: master

      - name: pay-direct-debit-frontend-image
        type: harbor
        icon: docker
        source:
          <<: *harbor_source
          repository: registry.((cluster.domain))/pay/direct-debit-frontend

          #- name: pay-endtoend-src
          #  type: git
          #  icon: github-circle
          #  source:
          #    uri: https://github.com/alphagov/pay-endtoend
          #    branch: master
          #    username: ((gh-readonly.username))
          #    password: ((gh-readonly.password))


    jobs:
      - name: build-cardid
        plan:
        - get: pipelines
        - get: pay-cardid-src
          trigger: true
          params:
            submodules: none
        - get: pay-cardid-data
          trigger: true
        - task: copy-data
          config:
            platform: linux
            image_resource:
              type: docker-image
              source: { repository: alpine }
            inputs:
              - name: pay-cardid-src
              - name: pay-cardid-data
            outputs:
              - name: pay-cardid-src
            run:
              path: ash
              args:
                - -c
                - |
                  set -o errexit -o xtrace
                  mkdir -p pay-cardid-src/data
                  cp -r pay-cardid-data/* pay-cardid-src/data/
        - task: build
          file: pipelines/tasks/maven-build.yaml
          input_mapping: { src: pay-cardid-src }
        - put: pay-cardid-image
          params:
            build: src
            tag_as_latest: true

      - name: build-frontend
        plan:
        - get: pipelines
        - get: pay-frontend-src
          trigger: true
        - task: test
          file: pipelines/tasks/frontend.yaml
          input_mapping: { src: pay-frontend-src }
        - put: pay-frontend-image
          params:
            build: src
            tag_as_latest: true

      - name: build-toolbox
        plan:
        - get: pipelines
        - get: pay-toolbox-src
          trigger: true
        - task: env-file
          config:
            platform: linux
            image_resource:
              type: docker-image
              source: { repository: node }
            inputs:
              - name: pay-toolbox-src
            outputs:
              - name: pay-toolbox-src
            run:
              path: bash
              dir: pay-toolbox-src
              args: [ "./scripts/generate-dev-environment" ]
        - task: test
          file: pipelines/tasks/node-test.yaml
          input_mapping: { src: pay-toolbox-src }
        - put: pay-toolbox-image
          params:
            build: src
            tag_as_latest: true

      - name: build-connector
        plan:
        - get: pipelines
        - get: pay-connector-src
          trigger: true
        - task: test
          file: pipelines/tasks/maven-build.yaml
          input_mapping: { src: pay-connector-src }
        - put: pay-connector-image
          params:
            build: src
            tag_as_latest: true

      - name: build-ledger
        plan:
        - get: pipelines
        - get: pay-ledger-src
          trigger: true
        - task: test
          file: pipelines/tasks/maven-build.yaml
          input_mapping: { src: pay-ledger-src }
        - put: pay-ledger-image
          params:
            build: src
            tag_as_latest: true

      - name: build-products
        plan:
        - get: pipelines
        - get: pay-products-src
          trigger: true
        - task: test
          file: pipelines/tasks/maven-build.yaml
          input_mapping: { src: pay-products-src }
        - put: pay-products-image
          params:
            build: src
            tag_as_latest: true

      - name: build-direct-debit-connector
        plan:
        - get: pipelines
        - get: pay-direct-debit-connector-src
          trigger: true
        - task: test
          file: pipelines/tasks/maven-build.yaml
          input_mapping: { src: pay-direct-debit-connector-src }
        - put: pay-direct-debit-connector-image
          params:
            build: src
            tag_as_latest: true

      - name: build-direct-debit-frontend
        plan:
        - get: pipelines
        - get: pay-direct-debit-frontend-src
          trigger: true
        - task: test
          file: pipelines/tasks/frontend.yaml
          input_mapping: { src: pay-direct-debit-frontend-src }
        - put: pay-direct-debit-frontend-image
          params:
            build: src
            tag_as_latest: true


          #- name: deploy-to-staging
          #  serial: true
          #  plan:
          #  # FIXME
          #  - get: pay-cardid-image
          #    passed: ['build-pay-cardid']
          #    trigger: true

          #  - task: deploy-to-staging
          #    config:
          #      platform: linux
          #      image_resource:
          #        type: docker-image
          #        source:
          #          repository: govsvc/task_toolbox
          #          tag: gsp-v1.1.11
          #      inputs:
          #      - name: pay-cardid-image
          #      params:
          #        CLUSTER_NAME: ((cluster.name))
          #        CLUSTER_DOMAIN: ((cluster.domain))
          #        CLUSTER_PRIVATE_KEY: ((cluster.privateKey))
          #        RELEASE_NAMESPACE: ((namespace-deployer.namespace))
          #        RELEASE_NAME: staging
          #      run:
          #        path: /bin/bash
          #        args:
          #        - -eu
          #        - -c
          #        - |
          #          echo "Generating helm values for latest image versions..."
          #          mkdir -p chart-values
          #          cat << EOF > ./overrides.yaml
          #          cardid:
          #            image:
          #              repository: $(cat pay-cardid-image/repository)@$(cat pay-cardid-image/digest | cut -d ':' -f 1)
          #              tag: $(cat pay-cardid-image/digest | cut -d ':' -f 2)
          #          EOF
          #          echo "Merging with chart values..."
          #          spruce merge ./pay-cardid-src/chart/values.yaml ./overrides.yaml | tee -a chart-values/values.yaml
          #          helm template \
          #            --name "${RELEASE_NAME}" \
          #            --namespace "${RELEASE_NAMESPACE}" \
          #            --set "global.cluster.name=${CLUSTER_NAME}" \
          #            --set "global.cluster.domain=${CLUSTER_DOMAIN}" | kubectl apply -n "${RELEASE_NAMESPACE}" -f


          #- name: test-in-staging
          #  serial: true
          #  plan:
          #  - get: every-10m
          #    trigger: true
          #  - get: pay-endtoend-src

          #  - aggregate:
          #    - task: run-card-tests
          #      file: pay-endtoend-src/ci/tasks/run-tests.yml
          #      input_mapping: { repo: pay-endtoend-src }
          #      params:
          #        TEST_PROFILE: end2end
          #        EXTRA_MVN_ARGS: "-Dit.test=!uk.gov.pay.endtoend.tests.publicapi.PaymentAndRefundIT"

          #    - task: run-directdebit-tests
          #      file: pay-endtoend-src/ci/tasks/run-tests.yml
          #      input_mapping: { repo: pay-endtoend-src }
          #      params:
          #        TEST_PROFILE: end2end-tagged
          #        GROUPS: uk.gov.pay.endtoend.categories.End2EndDirectDebit

          #    - task: run-product-tests
          #      file: pay-endtoend-src/ci/tasks/run-tests.yml
          #      input_mapping: { repo: pay-endtoend-src }
          #      params:
          #        TEST_PROFILE: end2end-tagged
          #        GROUPS: uk.gov.pay.endtoend.categories.End2EndProducts


          #- name: deploy-to-production
          #  serial: true
          #  plan:
          #  # FIXME
          #  - get: pay-cardid-image
          #    passed: ['build-pay-cardid']
          #    trigger: true

          #  - task: deploy-to-staging
          #    config:
          #      platform: linux
          #      image_resource:
          #        type: docker-image
          #        source:
          #          repository: govsvc/task_toolbox
          #          tag: gsp-v1.1.11
          #      inputs:
          #      - name: pay-cardid-image
          #      params:
          #        CLUSTER_NAME: ((cluster.name))
          #        CLUSTER_DOMAIN: ((cluster.domain))
          #        CLUSTER_PRIVATE_KEY: ((cluster.privateKey))
          #        RELEASE_NAMESPACE: ((namespace-deployer.namespace))
          #        RELEASE_NAME: production
          #      run:
          #        path: /bin/bash
          #        args:
          #        - -eu
          #        - -c
          #        - |
          #          echo "Generating helm values for latest image versions..."
          #          mkdir -p chart-values
          #          cat << EOF > ./overrides.yaml
          #          esp:
          #            image:
          #              repository: $(cat pay-cardid-image/repository)@$(cat pay-cardid-image/digest | cut -d ':' -f 1)
          #              tag: $(cat pay-cardid-image/digest | cut -d ':' -f 2)
          #          EOF
          #          echo "Merging with chart values..."
          #          spruce merge ./pay-cardid-src/chart/values.yaml ./overrides.yaml | tee -a chart-values/values.yaml
          #          helm template \
          #            --name "${RELEASE_NAME}" \
          #            --namespace "${RELEASE_NAMESPACE}" \
          #            --set "global.cluster.name=${CLUSTER_NAME}" \
          #            --set "global.cluster.domain=${CLUSTER_DOMAIN}" | kubectl apply -n "${RELEASE_NAMESPACE}" -f
